use polypath::ObjObject;

const OBJECT_NAMES: &[&str] = &["cube1", "cube2", "cube3"];
const GROUP_NAMES: &[&str] = &["1", "", "3"];
const VERT_POS: &[[(f32, f32, f32); 3]] = &[
    [(0.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 0.0), (1.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 1.0), (0.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (0.0, 1.0, 1.0)],
    [(0.0, 1.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 0.0)],
    [(0.0, 1.0, 0.0), (0.0, 1.0, 1.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 1.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 1.0), (0.0, 0.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 0.0, 1.0), (1.0, 1.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 1.0, 1.0), (0.0, 1.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 0.0), (1.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 1.0), (0.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (0.0, 1.0, 1.0)],
    [(0.0, 1.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 0.0)],
    [(0.0, 1.0, 0.0), (0.0, 1.0, 1.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 1.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 1.0), (0.0, 0.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 0.0, 1.0), (1.0, 1.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 1.0, 1.0), (0.0, 1.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 0.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 0.0), (1.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 1.0, 1.0), (0.0, 1.0, 0.0)],
    [(0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (0.0, 1.0, 1.0)],
    [(0.0, 1.0, 0.0), (1.0, 1.0, 1.0), (1.0, 1.0, 0.0)],
    [(0.0, 1.0, 0.0), (0.0, 1.0, 1.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 0.0), (1.0, 1.0, 1.0)],
    [(1.0, 0.0, 0.0), (1.0, 1.0, 1.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 0.0), (1.0, 0.0, 1.0)],
    [(0.0, 0.0, 0.0), (1.0, 0.0, 1.0), (0.0, 0.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 0.0, 1.0), (1.0, 1.0, 1.0)],
    [(0.0, 0.0, 1.0), (1.0, 1.0, 1.0), (0.0, 1.0, 1.0)],
];

#[test]
fn test_cube() {
    let obj = ObjObject::read_from_file("./meshes/cubes.obj").unwrap();

    assert_eq!(obj.object_count(), 3);
    for (i, o) in obj.objects_iter().enumerate() {
        assert_eq!(o.name(), OBJECT_NAMES[i]);

        assert_eq!(o.group_count(), 1);
        for g in o.group_iter() {
            assert_eq!(g.name(), GROUP_NAMES[i]);

            assert_eq!(g.face_count(), 12);
            for (i, f) in g.faces_iter().enumerate() {
                let [v1, v2, v3] = f.vertices();

                let [s1, s2, s3] = VERT_POS[i];

                assert_eq!(v1.position, s1);
                assert_eq!(v2.position, s2);
                assert_eq!(v3.position, s3);
            }
        }
    }
}
